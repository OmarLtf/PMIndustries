{"version":3,"file":"index.production.js","sources":["../../../query-core/build/esm/index.js","../../src/QueryClientProvider.tsx","../../src/isRestoring.tsx","../../src/QueryErrorResetBoundary.tsx","../../src/utils.ts","../../src/useBaseQuery.ts","../../src/Hydrate.tsx","../../src/useMutation.ts","../../src/useInfiniteQuery.ts","../../src/useIsFetching.ts","../../src/useIsMutating.ts","../../src/useQueries.ts","../../src/useQuery.ts"],"sourcesContent":["/**\n * query-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nclass Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\n// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined';\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nconst defaultLogger = console;\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState$1(this.options);\n    this.state = this.initialState;\n    this.meta = config.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.meta = options == null ? void 0 : options.meta;\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on2, _this$cache$config2;\n\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined'));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: state.fetchFailureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState$1(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasInitialData = typeof options.initialData !== 'undefined';\n  const initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  const hasData = typeof data !== 'undefined';\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.options = { ...config.defaultOptions,\n      ...config.options\n    };\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.meta = config.meta;\n    this.updateCacheTime(this.options.cacheTime);\n    this.scheduleGc();\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    if (this.retryer) {\n      this.retryer.continue();\n      return this.retryer.promise;\n    }\n\n    return this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: () => {\n          this.dispatch({\n            type: 'failed'\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: state.failureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined,\n      meta: options.meta\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n    return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n  }\n\n}\n\nfunction infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n\n  mount() {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    };\n  }\n\n}\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}\n\nexport { CancelledError, InfiniteQueryObserver, MutationCache, MutationObserver, QueriesObserver, QueryCache, QueryClient, QueryObserver, dehydrate, focusManager, hashQueryKey, hydrate, isCancelledError, isError, notifyManager, onlineManager, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\n\nimport { QueryClient } from '@tanstack/query-core'\nimport { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import * as React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport { QueryKey, notifyManager, QueryObserver } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { shouldThrowError } from './utils'\nimport { useIsRestoring } from './isRestoring'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (\n    defaultedOptions.suspense &&\n    result.isLoading &&\n    result.isFetching &&\n    !isRestoring\n  ) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch((error) => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(defaultedOptions.useErrorBoundary, [\n      result.error,\n      observer.getCurrentQuery(),\n    ])\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import * as React from 'react'\n\nimport { hydrate, HydrateOptions } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n  MutationFunction,\n  MutationKey,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import {\n  QueryObserver,\n  InfiniteQueryObserver,\n  QueryFunction,\n  QueryKey,\n  parseQueryArgs,\n} from '@tanstack/query-core'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import * as React from 'react'\nimport {\n  QueryKey,\n  notifyManager,\n  parseFilterArgs,\n  QueryFilters,\n} from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  notifyManager,\n  MutationKey,\n  MutationFilters,\n  parseMutationFilterArgs,\n} from '@tanstack/query-core'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  QueryKey,\n  QueryFunction,\n  notifyManager,\n  QueriesObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  return result as QueriesResults<T>\n}\n","import {\n  parseQueryArgs,\n  QueryFunction,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport { DefinedUseQueryResult, UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchMeta","isInvalidated","getDefaultState$1","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","getDefaultState","execute","async","executeMutation","_this$options$retry","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","getQueryCache","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","shallowEqualObjects","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","MutationObserver","mutate","_this$currentMutation","currentMutation","mutateOptions","getMutationCache","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","hydrate","dehydratedState","queryCache","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","IsRestoringContext","useIsRestoring","IsRestoringProvider","Provider","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","_useErrorBoundary","params","useBaseQuery","Observer","isRestoring","errorResetBoundary","useState","useSyncExternalStore","useCallback","onStoreChange","useEffect","useHydrate","optionsRef","useRef","current","useMemo","children","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","parsedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","Context","createElement","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","mutateAsync","defaultedQueries"],"mappings":"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"}